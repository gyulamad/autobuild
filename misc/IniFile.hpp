#pragma once

#include <string>
#include <vector>
#include "Logger.hpp"
#include "ERROR.hpp"
#include "explode.hpp"
#include "file_get_contents.hpp"
#include "file_put_contents.hpp"
#include "trim.hpp"
#include "foreach.hpp"
#include "array_key_exists.hpp"
#include "array_keys.hpp"
#include "array_values.hpp"
#include "parse.hpp"
#include "safe.hpp"
#include "IniData.hpp"
#include "Logger.hpp"
#include "file_exists.hpp"

using namespace std;

class IniFile: public IniData {
public:
    IniFile(const string& filename = "", bool load = false, bool createIfNotExists = false, bool throwsIfNotExists = false): 
        IniData()
    {
        if (!filename.empty()) {
            if (load) this->load(filename, createIfNotExists, throwsIfNotExists);
            else if (!setFilename(filename, createIfNotExists, throwsIfNotExists)) 
                throw ERROR("Unknown ini file error: " + filename);
        }
    }

    virtual ~IniFile() {}

    function<void()> onLoad = nullptr;
    function<void()> onSave = nullptr;
    function<void()> onSaveAs = nullptr;

    const string& getFilenameCRef() const { return filename; }

    void load(const string& filename = "", bool createIfNotExists = false, bool throwsIfNotExists = false) {
        if (!setFilename(filename, createIfNotExists, throwsIfNotExists)) return;

        string section = "";
        data.clear();
        LOG("Loading ini file: " + F(F_FILE, this->filename));
        vector<string> lines = explode("\n", file_get_contents(this->filename));
        size_t size = lines.size();
        for (size_t ln = 0; ln < size; ln++) {
            string cleanln = trim(explode(";", explode("#", lines[ln])[0])[0]);
            if (cleanln.empty()) continue;
            if (cleanln.starts_with('[') && cleanln.ends_with(']')) {
                section = trim(cleanln, "[]");
                continue;
            }
            vector<string> splits = explode("=", cleanln);
            string key = trim(splits[0]);
            if (splits.size() < 2)
                throw ERROR("Value is missing at key '" + EMPTY_OR(key) + "' in " + EMPTY_OR(filename) + ":" + ::to_string(ln + 1));
            string val = trim(splits[1]);
            data[section][key] = val;
        }

        if (onLoad) onLoad();
        changed = false;
    }

    void save(const string& filename = "", bool keepFilenameChanged = false, bool createIfNotExists = true) {
        string _filename = this->filename;
        bool saveAs = setFilename(filename, createIfNotExists);

        string contents;
        for (const auto& [section, values]: data) {
            contents += section.empty() ? "" : "[" + section + "]\n";
            for (const auto& [key, val]: values)
                contents += key + "=" + val + "\n";
            contents += "\n";
        }
        
        bool error = false;
        string errmsg = "";
        try {
            file_put_contents(this->filename, contents, false, true);
        } catch (exception& e) {
            error = true;
            errmsg = "IniFile save failed: " + EWHAT;
        }

        if (!keepFilenameChanged)
            this->filename = _filename;

        if (error)
            throw ERROR(errmsg);

        if (saveAs) {
            if (onSaveAs) onSaveAs();
        } else 
            if (onSave) onSave();
        changed = false;
    }

    template<typename T>
    T get(const string& key, const string& section = "") const {
        try {
            return IniData::get<T>(key, section);
        } catch (exception &e) {
            throw ERROR("Unable to get ini file value at key " + EMPTY_OR(key) + " at section [" + EMPTY_OR(section, "<global>") + "] in file " + EMPTY_OR(filename) + "" + EWHAT);
        }
    }

protected:
    string filename = "";

    [[nodiscard]]
    bool setFilename(const string& filename = "", bool createIfNotExists = false, bool throwsIfNotExists = false) {
        bool changed = false;

        if (!filename.empty())
            if ((changed = (filename != this->filename))) {
                this->filename = filename;
            }
            
        if (this->filename.empty())
            throw ERROR("Filename is empty or undefined.");

        if (!file_exists(this->filename)) {
            if (createIfNotExists) {
                LOG("Create file: " + this->filename);
                file_put_contents(this->filename, "; Autogenerated initialization file\n\n", false, true);
            } else 
                if (throwsIfNotExists)
                    throw ERROR("File not found: " + this->filename);
        }

        this->changed = this->changed || changed;
        return changed;
    }

};

#ifdef TEST

#include "unlink.hpp"

// Test for get
TEST(test_IniFile_operator_bracket_get) {
    string filename = "test_temp_operator_bracket.ini";
    string file_content = "key1=value1\nkey2=value2";
    
    // Clean up any existing file and create a new one
    unlink(filename.c_str());
    file_put_contents(filename, file_content, false, true);

    IniFile ini;
    capture_cout_cerr([&]() {
        ini.load(filename);
    });

    assert(ini.get<string>("key1") == "value1" && "should get correct value for key1");
    assert(ini.get<string>("key2") == "value2" && "should get correct value for key2");

    bool threw = false;
    try {
        ini.get<string>("key3");
    } catch (exception& e) {
        string what = e.what();
        assert(
            str_contains(what, "Key is not exists") && 
            str_contains(what, "key3") &&
            "should throw for missing key"
        );
        threw = true;
    }
    assert(threw && "should throw for non-existent key");

    // Clean up
    unlink(filename.c_str());
}

// Test for loading a valid INI file
// Test for loading a valid INI file
TEST(test_IniFile_load_valid_file) {
    string filename = "test_temp_load_valid.ini";
    string file_content = "key1=value1\nkey2=value2\n#comment\n;another comment\n";
    
    // Clean up any existing file and create a new one
    unlink(filename.c_str());
    file_put_contents(filename, file_content, false, true);

    IniFile ini;
    capture_cout_cerr([&]() {
        ini.load(filename);
    });

    // Verify using getters
    assert(ini.size() == 2 && "Loaded data size should be 2");
    assert(ini.has("key1") && "Key key1 should exist in loaded data");
    assert(ini.get<string>("key1") == "value1" && "Value for key1 should be value1");
    assert(ini.has("key2") && "Key key2 should exist in loaded data");
    assert(ini.get<string>("key2") == "value2" && "Value for key2 should be value2");

    // Clean up
    unlink(filename.c_str());
}

// Test for loading with empty filename
TEST(test_IniFile_load_empty_filename) {
    string filename = "";
    IniFile ini;
    bool threw = false;
    try {
        ini.load(filename);
    } catch (exception& e) {
        string what = e.what();
        assert(str_contains(what, "Filename is empty or undefined.") && "Exception should mention empty filename");
        threw = true;
    }
    assert(threw && "load should throw for empty filename");
}

// Test for loading with missing value in file
TEST(test_IniFile_load_missing_value) {
    string filename = "test_temp_load_missing.ini";
    string file_content = "key1\nkey2=value2";
    
    // Clean up any existing file and create a new one
    unlink(filename.c_str());
    file_put_contents(filename, file_content, false, true);

    IniFile ini;
    bool threw = false;
    try {
        capture_cout_cerr([&]() {
            ini.load(filename);
        });
    } catch (exception& e) {
        string what = e.what();
        assert(str_contains(what, "Value is missing") && str_contains(what, "key1") && "Exception should mention missing value");
        threw = true;
    }

    assert(threw && "load should throw for missing value");

    // Clean up
    unlink(filename.c_str());
}

// Test for saving with valid data
TEST(test_IniFile_save_valid_data) {
    string filename = "test_temp_save_valid.ini";
    
    // Clean up any existing file
    unlink(filename.c_str());

    IniFile ini_check;
    capture_cout_cerr([&]() {
        IniFile ini(filename, false);
        // Use set to populate
        ini.set("key1", "value1");
        ini.set("key2", 42);    
        ini.save();

        // Read back the saved file
        ini_check.load(filename);
    });

    // Verify using getters
    assert(ini_check.size() == 2 && "Saved data size should be 2");
    assert(ini_check.has("key1") && "Key key1 should exist in saved data");
    assert(ini_check.get<string>("key1") == "value1" && "Value for key1 should be value1");
    assert(ini_check.has("key2") && "Key key2 should exist in saved data");
    assert(ini_check.get<string>("key2") == "42" && "Value for key2 should be 42");

    // Clean up
    unlink(filename.c_str());
}

// Test for saving with empty filename
TEST(test_IniFile_save_empty_filename) {
    string filename = "";
    IniFile ini;
    bool threw = false;
    try {
        ini.save(filename);
    } catch (exception& e) {
        string what = e.what();
        assert(str_contains(what, "Filename is empty or undefined.") && "Exception should mention empty filename");
        threw = true;
    }
    assert(threw && "save should throw for empty filename");
}

#endif